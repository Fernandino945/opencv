import cv2

# Cargar clasificadores preentrenados de Haar para detectar rostro, ojos y sonrisa
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
smile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')

# Funci칩n para detectar partes del rostro
def detect_face_parts(image_path):
    # Leer la imagen
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convertir a escala de grises

    # Detectar rostros
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        # Dibujar rect치ngulo alrededor del rostro
        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]

        # Detectar ojos dentro de la regi칩n del rostro
        eyes = eye_cascade.detectMultiScale(roi_gray)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)

        # Detectar sonrisa dentro de la regi칩n del rostro
        smile = smile_cascade.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=20)
        for (sx, sy, sw, sh) in smile:
            cv2.rectangle(roi_color, (sx, sy), (sx+sw, sy+sh), (0, 0, 255), 2)

    # Mostrar imagen con detecciones
    cv2.imshow('Detected Face Parts', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Ejemplo de uso
image_path = 'ruta_de_tu_imagen.jpg'
detect_face_parts(image_path)
